{
	"info": {
		"_postman_id": "9659a29d-f912-4fd1-8df3-ba38919642ca",
		"name": "Collection1 (Test)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "GET Single User data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Hello World...\");\r",
									"\r",
									"let urlVar = pm.variables.get(\"base_url\");\r",
									"console.log(\"base_url value is: \" +urlVar);\r",
									"\r",
									"pm.variables.set(\"name\", \"POSTMAN\");\r",
									"console.log(pm.variables.get(\"name\"));\r",
									"\r",
									"let globalVar1 = pm.globals.get(\"TesterName\");\r",
									"console.log(globalVar1);\r",
									"\r",
									"let envVar1 = pm.environment.get(\"email\");\r",
									"console.log(envVar1);\r",
									"\r",
									"\r",
									"pm.test(\"Verifying the Response Time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying the Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"janet\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						},
						"description": "API Link: https://reqres.in/api/users/2"
					},
					"response": []
				},
				{
					"name": "GET List Users data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//to fetch data from the Respons Body & use into -> PUT Update User data\r",
									"bodyData = JSON.parse(responseBody)\r",
									"value = bodyData.data[3].first_name\r",
									"console.log(value);\r",
									"pm.environment.set(\"Username1\", value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users?page=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "PUT Update User data (Chain API Request from Response body of ->GET List User data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Username1}}\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "POST User Registration Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}{{endpoint}}",
							"host": [
								"{{base_url}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST User Registration Successful PrePod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//When external csv/json file is used\r",
									"pm.test(\"Body matches string - email\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(data.email);\r",
									"});\r",
									"\r",
									"//When external csv/json file is used\r",
									"pm.test(\"Body matches string - password\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(data[\"password\"]);\r",
									"});\r",
									"\r",
									"//When no external file is used\r",
									"pm.test(\"Body matches string - email from response body\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"eve.holt@reqres.in\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}{{endpoint}}/prepod",
							"host": [
								"{{base_url}}{{endpoint}}"
							],
							"path": [
								"prepod"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SOAP",
			"item": [
				{
					"name": "SOAP POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <Body>\r\n        <CapitalCity xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\r\n            <sCountryISOCode>BD</sCountryISOCode>\r\n        </CapitalCity>\r\n    </Body>\r\n</Envelope>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							],
							"query": [
								{
									"key": "WSDL",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication GitHub",
			"item": [
				{
					"name": "POST GitHub",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "client_authentication",
									"value": "header",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Creating Repo using PostMan Check1\",\r\n    \"description\": \"Test\",\r\n    \"homepage\": \"https://github.com\",\r\n    \"private\": true,\r\n    \"has_issues\": true,\r\n    \"has_projects\": true,\r\n    \"has_wiki\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"Hello World...\");",
					"",
					"let urlVar = pm.variables.get(\"base_url\");",
					"console.log(\"base_url value is: \" +urlVar);",
					"",
					"pm.variables.set(\"name\", \"POSTMAN\");",
					"console.log(pm.variables.get(\"name\"));",
					"",
					"let globalVar1 = pm.globals.get(\"TesterName\");",
					"console.log(globalVar1);",
					"",
					"let envVar1 = pm.environment.get(\"email\");",
					"console.log(envVar1);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://reqres.in"
		}
	]
}